services:
  database:
    container_name: pg-database
    image: postgres:16.2
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: cupid-meet
    ports:
      - "5433:5432"
    networks:
      - cupid-network

  user-details-service:
    image: qaaaaisar04/user-details-service
    container_name: user-details-service
    depends_on:
      - database
    ports:
      - "8728:8728"
      - "8090:8090"
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: cupid-meet
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    networks:
      - cupid-network

  location-data-service:
    image: qaaaaisar04/location-data-service
    container_name: location-data-service
    ports:
      - "8580:8580"
      - "8091:8090"
    environment:
      LOCATIONIQ_API_KEY: ${LOCATIONIQ_API_KEY}
    restart: always
    networks:
      - cupid-network

  feedback-service:
    image: qaaaaisar04/feedback-service
    container_name: feedback-service
    depends_on:
      - database
    ports:
      - "8504:8504"
      - "8092:8090"
    environment:
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: cupid-meet
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    networks:
      - cupid-network

  minio:
    image: minio/minio:RELEASE.2024-05-10T01-41-38Z-cpuv1
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - cupid-network

  minio-config:
    image: minio/mc
    depends_on:
      - minio
    environment:
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    entrypoint: [ "sh", "-c",
      "mc alias set cupidmeet http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY} 
      && mc mb cupidmeet/cupid-meet" ]
    networks:
      - cupid-network

  storage-service:
    image: qaaaaisar04/storage-service
    container_name: storage-service
    depends_on:
       - minio-config
       - database
    ports:
      - "8084:8084"
      - "8093:8090"
    environment:
      S3_ENDPOINT: http://minio:9000
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: cupid-meet
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      S3_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      S3_SECRET_KEY: ${MINIO_SECRET_KEY}
    restart: always
    networks:
      - cupid-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/dist:/usr/share/nginx/html
      - /etc/nginx/ssl/qaisar_online.crt:/etc/nginx/ssl/qaisar_online.crt
      - /etc/nginx/ssl/qaisar_online.key:/etc/nginx/ssl/qaisar_online.key
      - /etc/nginx/ssl/qaisar_online.ca-bundle:/etc/nginx/ssl/qaisar_online.ca-bundle
      - /etc/letsencrypt/live/s3.qaisar.online/fullchain.pem:/etc/nginx/ssl/s3_qaisar_online.crt
      - /etc/letsencrypt/live/s3.qaisar.online/privkey.pem:/etc/nginx/ssl/s3_qaisar_online.key
      - /etc/letsencrypt/live/monitor.qaisar.online/fullchain.pem:/etc/nginx/ssl/monitor_qaisar_online.crt
      - /etc/letsencrypt/live/monitor.qaisar.online/privkey.pem:/etc/nginx/ssl/monitor_qaisar_online.key
      - ./sites-enabled:/etc/nginx/sites-enabled
    depends_on:
      - minio
      - location-data-service
      - user-details-service
      - feedback-service
    networks:
      - cupid-network

  prometheus:
    image: prom/prometheus:v2.50.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - '9090:9090'
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/grafana:/var/lib/grafana
    command: '--config.file=/etc/prometheus/prometheus.yml'
    depends_on:
      - user-details-service
    networks:
      - cupid-network

  grafana:
    image: grafana/grafana:10.2.4
    container_name: grafana
    restart: always
    ports:
      - '3000:3000'
    links:
      - prometheus:prometheus
    volumes:
      - grafana_storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      - cupid-network

  qr-service:
    image: qaaaaisar04/qr-service
    container_name: qr-service
    depends_on:
      - storage-service
    ports:
      - "7070:7070"
      - "8094:8090"
    environment:
      STORAGE_SERVICE_GRPC_URL: storage-service:8801
    restart: always
    networks:
      - cupid-network

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
      DB_VENDOR: postgres
      DB_ADDR: database
      DB_DATABASE: cupid-meet
      DB_SCHEMA: keycloak
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      KC_HTTPS_CERTIFICATE_FILE: /etc/x509/https/tls.crt
      KC_HTTPS_CERTIFICATE_KEY_FILE: /etc/x509/https/tls.key
    ports:
      - '8083:8080'
      - '8843:8443'
    command: start-dev --import-realm
    depends_on:
      - database
      - kafka
    restart: always
    volumes:
      - /etc/nginx/ssl/qaisar_online.crt:/etc/x509/https/tls.crt
      - /etc/nginx/ssl/qaisar_online.key:/etc/x509/https/tls.key
      - ./config/keycloak/realms:/opt/keycloak/data/import
      - './event-listener-keycloak-extension/target/event-listener-keycloak-extension-assembly.jar:/opt/keycloak/providers/event-listener-keycloak-extension.jar'
    networks:
      - cupid-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - cupid-network

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: always
    networks:
      - cupid-network

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    ports:
      - "9002:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
      JVM_OPTS: -Xms32M -Xmx64M
    depends_on:
      - kafka
    networks:
      - cupid-network

volumes:
  minio_data:
  grafana_storage:

networks:
  cupid-network: